"use client"

import { useAtom, useAtomValue } from "jotai";
import dynamic from "next/dynamic";
import Head from "next/head";
import { useEffect, useMemo, useRef, useState } from "react";
import Swal from "sweetalert2";
import { WheelItem, emptyWheelData, wheelDataAtom, wowSoundVolumeAtom } from "~/server/state";
import ConfettiExplosion from 'react-confetti-explosion';
import NameList from "~/app/_components/NameList";
import { api } from "~/trpc/react";
import { useSession } from "next-auth/react";

const Wheel = dynamic(
  () => import("react-custom-roulette").then((mod) => mod.Wheel),
  { ssr: false }
);

const FakeHeader = () => {
  return (
    <div className="bg-purple-700 rounded-t-lg h-10 w-full flex justify-end">
      <div className="flex flex-row items-center gap-2 mr-3">
        <div className="w-4 h-4 rounded-full bg-white"></div>
        <div className="w-4 h-4 rounded-full bg-white"></div>
        <div className="w-4 h-4 rounded-full bg-white"></div>
      </div>
    </div>
  );
}

export default function Home() {
  const [mustStartSpinning, setMustStartSpinning] = useState(false);
  const [prizeNumber, setPrizeNumber] = useState(0);
//   const data = useAtomValue(wheelDataAtom)
  const [isExploding, setIsExploding] = useState(false);
  const [volume, setVolume] = useAtom(wowSoundVolumeAtom);
  const audioRef = useRef<HTMLAudioElement>(null);
  const { data: requests } = api.songRequest.getLatest.useQuery(undefined, {
    refetchInterval: 1000,
    refetchIntervalInBackground: true,
    enabled: !mustStartSpinning,
  });
  const { mutate: deleteRequest } = api.songRequest.delete.useMutation();
  const { mutate: clearAll } = api.songRequest.clearAll.useMutation()
  const { data: isAdmin } = api.users.isAdmin.useQuery()

  const formattedRequests: WheelItem[] = useMemo(() => {
    if (!requests) return [];

    return requests.map((item) => ({
        option: item.twitchUser,
        style: { textColor: "black" },
        optionSize: 1,
        requestText: item.requestText!,
        requestId: item.id,
    }))
  }, [requests])

  const playSound = async () => {
    if (audioRef.current) {
      await audioRef.current.play();
    }
  };
  
  const resetSound = () => {
    if (audioRef.current) {
      audioRef.current.currentTime = 0; // Reset the playback position to the start
      audioRef.current.pause();
    }
  };

  useEffect(() => {
    // set audio volume
    if (audioRef.current) {
      audioRef.current.volume = volume;
    }
  }, [audioRef]);


  const handleVolumeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newVolume = parseFloat(e.target.value);
    setVolume(newVolume);
    if (audioRef.current) {
      audioRef.current.volume = newVolume;
    }
  };

  const handleRemoveRequest = (index: number) => {
    deleteRequest({
        id: index
    }, {
        onSuccess: () => {
            console.log('deleted')
        }

    });
  }

  const handleClearAll = () => {
    void Swal.fire({
      title: "Are you sure?",
      text: "Are you sure you want to clear all the requests?",
      confirmButtonText: "Clear All",
      confirmButtonColor: "#DC2626",
      showCancelButton: true,
      cancelButtonText: "Nah"

    }).then(response => {
      if (response.isConfirmed) {
        clearAll(undefined, {
          onSuccess: () => {
            void Swal.fire({
              icon: "success",
              title: "Requests Cleared"
            })
          }
        })
      }
    })

  }

  return (
    <>
      <Head>
        <title>Officedrummer Wheel</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main 
        className="flex max-h-screen flex-col items-center justify-center"
        style={{
          backgroundImage: 'url(/fire-bg.jpg)',
          backgroundSize: 'cover',
          backgroundPosition: 'center',
          backgroundRepeat: 'no-repeat'
        }}
        >
        
        <audio ref={audioRef} src="/wow.mp3" preload="auto"></audio>

        {/* {isExploding && <ConfettiExplosion 
          zIndex={20}
          force={0.8}
          onComplete={() => setIsExploding(false)}
          width={1600}
        />} */}

        <div className="flex flex-col w-full max-w-7xl h-screen max-h-screen">

          <div className='flex flex-row gap-2 py-2 justify-center'>
            <div className="bg-white rounded-lg">
              <FakeHeader />
                <input 
                    type="range" 
                    min="0" 
                    max="1" 
                    step="0.01" 
                    value={volume} 
                    onChange={handleVolumeChange} 
                />
              <div className='ofd-wheel-container relative aspect-square'>
                <Wheel
                  mustStartSpinning={mustStartSpinning}
                  onStopSpinning={async () => {
                    setMustStartSpinning(false)
                    setIsExploding(true)
                    await playSound()
                    void Swal.fire({
                      title: "The winner is...",
                      html: `<h1 className='text-xl font-bold'>${formattedRequests[prizeNumber]?.option}</h1>
                      <p>${formattedRequests[prizeNumber]?.requestText}</p>
                      `,
                      backdrop: false,
                      confirmButtonText: "Remove",
                      showCancelButton: true,
                      cancelButtonText: "Not Here"
                    }).then((response) => {
                        if (response.isConfirmed) {
                            handleRemoveRequest(formattedRequests[prizeNumber]!.requestId!);
                        }
                    })
                  }}
                  prizeNumber={prizeNumber}
                  data={formattedRequests.length > 0 ? formattedRequests : emptyWheelData}
                  backgroundColors={["#F49201", "#F24108", "#FFFFFF"]}
                  textColors={["#ffffff"]}
                  innerRadius={0}
                  spinDuration={0.5}
                  pointerProps={{
                    src: '/leftStick.png',
                    style: {
                      transform: 'rotate(-90deg)'
                    }
                  }}
                  fontSize={15}
                  radiusLineWidth={2}
                />
                <button
                  className="p-8 aspect-square rounded-full bg-[#df3428] text-white absolute top-[19rem] left-[19rem] transform z-10 shadow-xl shadow-yellow-200 disabled:opacity-50 disabled:cursor-not-allowed"
                  onClick={() => {
                    resetSound();
                    setPrizeNumber(Math.floor(Math.random() * formattedRequests.length));
                    setMustStartSpinning(true);
                  }}
                  disabled={formattedRequests.length === 0}
                >
                  Spin
                </button>
              </div>
            </div>

            {isAdmin && <div className='w-[475px] h-full'>
              <FakeHeader />
              {/* <NameList audioRef={audioRef} /> */}
              <div className='w-full max-h-screen bg-white p-2 rounded-b-lg '>

                <button
                  className='w-1/4 bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded ml-2'
                  onClick={handleClearAll}
                >
                    Clear All Requests
                </button>

              </div>
            </div>}
          </div>

        </div>
      </main>
    </>
  );
}
